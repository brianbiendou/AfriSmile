/**
 * Script de v√©rification du remplacement de la section "r√©duction" 
 * par la section "livraison" dans les cartes prestataires
 */

const fs = require('fs');
const path = require('path');

// Chemin vers le fichier ProviderCard.tsx
const filePath = path.join(__dirname, 'components', 'ProviderCard.tsx');

function verifyContentUpdate() {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    
    console.log('üîç V√©rification du remplacement de contenu des cartes prestataires...\n');
    
    // V√©rifications de suppression (ces √©l√©ments ne doivent plus √™tre pr√©sents)
    const removedElements = [
      'savingsAmount',
      'generateSavingsAmount',
      'shimmerAnim',
      'shimmerTranslate',
      'savingsContainer',
      'savingsBackground',
      'shimmerOverlay',
      'savingsText',
      'Jusqu\'√†',
      'FCFA de r√©duction'
    ];
    
    // V√©rifications d'ajout (ces √©l√©ments doivent √™tre pr√©sents)
    const addedElements = [
      'deliveryContainer',
      'deliveryBackground', 
      'deliveryText',
      'üöÄ Livraison',
      'provider.estimatedTime',
      '#E8F5E8', // Couleur vert clair
      '#00B14F'  // Couleur vert vif
    ];
    
    let removedCount = 0;
    let addedCount = 0;
    
    console.log('‚ùå V√©rification des √©l√©ments supprim√©s:');
    removedElements.forEach(element => {
      if (!fileContent.includes(element)) {
        console.log(`‚úÖ Supprim√©: ${element}`);
        removedCount++;
      } else {
        console.log(`‚ö†Ô∏è Encore pr√©sent: ${element}`);
      }
    });
    
    console.log('\n‚úÖ V√©rification des √©l√©ments ajout√©s:');
    addedElements.forEach(element => {
      if (fileContent.includes(element)) {
        console.log(`‚úÖ Ajout√©: ${element}`);
        addedCount++;
      } else {
        console.log(`‚ùå Manquant: ${element}`);
      }
    });
    
    console.log(`\nüìä R√©sum√© de la migration:`);
    console.log(`‚Ä¢ √âl√©ments supprim√©s: ${removedCount}/${removedElements.length}`);
    console.log(`‚Ä¢ √âl√©ments ajout√©s: ${addedCount}/${addedElements.length}`);
    
    // V√©rification sp√©cifique de la structure du nouveau contenu
    const hasDeliveryStructure = fileContent.includes('deliveryContainer') && 
                                fileContent.includes('deliveryBackground') && 
                                fileContent.includes('üöÄ Livraison {provider.estimatedTime}');
    
    const hasOldStructure = fileContent.includes('savingsContainer') || 
                           fileContent.includes('Jusqu\'√†') ||
                           fileContent.includes('FCFA de r√©duction');
    
    console.log(`\nüéØ V√©rification structurelle:`);
    console.log(`‚Ä¢ Nouvelle structure livraison: ${hasDeliveryStructure ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚Ä¢ Ancienne structure r√©duction: ${hasOldStructure ? '‚ùå Encore pr√©sente' : '‚úÖ Supprim√©e'}`);
    
    if (hasDeliveryStructure && !hasOldStructure && removedCount >= 8 && addedCount >= 6) {
      console.log('\nüéâ Migration r√©ussie !');
      console.log('‚ú® La section "r√©duction" a √©t√© remplac√©e par "livraison" avec succ√®s.');
      console.log('üöÄ Les cartes affichent maintenant le temps de livraison estim√©.');
    } else {
      console.log('\n‚ö†Ô∏è Migration incompl√®te. V√©rifiez les √©l√©ments manquants ci-dessus.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture du fichier:', error.message);
  }
}

// Fonction pour v√©rifier les imports
function verifyImports() {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    
    console.log('\nüîç V√©rification des imports...');
    
    const hasGenerateSavingsImport = fileContent.includes('generateSavingsAmount');
    
    if (!hasGenerateSavingsImport) {
      console.log('‚úÖ Import generateSavingsAmount supprim√©');
    } else {
      console.log('‚ö†Ô∏è Import generateSavingsAmount encore pr√©sent');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des imports:', error.message);
  }
}

// Ex√©cution des v√©rifications
console.log('üîß V√©rification du remplacement de contenu - Cartes Prestataires\n');
verifyContentUpdate();
verifyImports();
