/**
 * Script de v√©rification de la r√©duction de largeur des cartes "Recommand√©s pour vous"
 * V√©rifie que la largeur a √©t√© r√©duite de 40% dans la section featuredCard
 */

const fs = require('fs');
const path = require('path');

// Chemin vers le fichier index.tsx
const filePath = path.join(__dirname, 'app', '(tabs)', 'index.tsx');

function verifyFeaturedCardsWidthReduction() {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    
    console.log('üîç V√©rification de la r√©duction de largeur - Section "Recommand√©s pour vous"...\n');
    
    // V√©rifications sp√©cifiques
    const checks = [
      {
        search: 'width: width * 0.42',
        description: '‚úÖ Nouvelle largeur appliqu√©e (width * 0.42)',
        isNew: true
      },
      {
        search: '// R√©duit de 40%',
        description: '‚úÖ Commentaire explicatif ajout√©',
        isNew: true
      },
      {
        search: 'marginLeft: 20',
        description: '‚úÖ Espacement horizontal conserv√©',
        isNew: false
      }
    ];
    
    // V√©rifications des anciennes valeurs qui ne doivent plus √™tre pr√©sentes
    const oldChecks = [
      {
        search: 'width: width * 0.7,',
        description: '‚ö†Ô∏è Ancienne largeur encore pr√©sente (width * 0.7)',
        shouldNotExist: true
      }
    ];
    
    let passedChecks = 0;
    let totalChecks = checks.length;
    
    // V√©rifier les nouvelles valeurs
    checks.forEach(check => {
      if (fileContent.includes(check.search)) {
        console.log(check.description);
        passedChecks++;
      } else {
        console.log(`‚ùå MANQUANT: ${check.description}`);
      }
    });
    
    // V√©rifier les anciennes valeurs
    console.log('\nüîç V√©rification des anciennes valeurs...');
    let oldValuesFound = 0;
    
    oldChecks.forEach(check => {
      if (fileContent.includes(check.search)) {
        console.log(check.description);
        oldValuesFound++;
      } else {
        console.log(`‚úÖ Ancienne valeur correctement supprim√©e: ${check.search}`);
      }
    });
    
    // V√©rifier la structure g√©n√©rale
    console.log('\nüîç V√©rification de la structure...');
    
    if (fileContent.includes('featuredCard:')) {
      console.log('‚úÖ Style featuredCard trouv√©');
    } else {
      console.log('‚ùå Style featuredCard non trouv√©');
    }
    
    if (fileContent.includes('Recommand√©s pour vous')) {
      console.log('‚úÖ Section "Recommand√©s pour vous" trouv√©e');
    } else {
      console.log('‚ùå Section "Recommand√©s pour vous" non trouv√©e');
    }
    
    if (fileContent.includes('fullWidthCard')) {
      console.log('‚úÖ Style fullWidthCard pr√©serv√© (non modifi√©)');
    } else {
      console.log('‚ö†Ô∏è Style fullWidthCard non trouv√©');
    }
    
    // R√©sum√© final
    console.log(`\nüìä R√©sum√©: ${passedChecks}/${totalChecks} v√©rifications pass√©es`);
    
    if (passedChecks === totalChecks && oldValuesFound === 0) {
      console.log('üéâ Modification appliqu√©e avec succ√®s !');
      console.log('‚ú® La largeur des cartes "Recommand√©s pour vous" a √©t√© r√©duite de 40%');
      console.log('üìê Nouvelle largeur: 42% de l\'√©cran (au lieu de 70%)');
    } else if (oldValuesFound > 0) {
      console.log('‚ö†Ô∏è Des anciennes valeurs sont encore pr√©sentes.');
    } else {
      console.log('‚ö†Ô∏è Certaines v√©rifications ont √©chou√©.');
    }
    
    // Afficher un extrait du code modifi√©
    console.log('\nüìÑ Extrait du code modifi√©:');
    const featuredCardMatch = fileContent.match(/featuredCard:\s*{[\s\S]*?},/);
    if (featuredCardMatch) {
      console.log(featuredCardMatch[0]);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture du fichier:', error.message);
  }
}

// Ex√©cution du script
verifyFeaturedCardsWidthReduction();
