/**
 * Script de v√©rification des modifications de taille des cartes prestataires
 * V√©rifie que toutes les valeurs ont √©t√© r√©duites de 40% (multipli√©es par 0.6)
 */

const fs = require('fs');
const path = require('path');

// Chemin vers le fichier ProviderCard.tsx
const filePath = path.join(__dirname, 'components', 'ProviderCard.tsx');

// Valeurs attendues apr√®s r√©duction de 40%
const expectedValues = {
  // Card styles
  'borderRadius: 10': 'borderRadius r√©duit de 16 √† 10',
  'height: 1': 'shadowOffset height r√©duit de 2 √† 1',
  'shadowRadius: 5': 'shadowRadius r√©duit de 8 √† 5',
  
  // Image
  'height: 90': 'Image height r√©duite de 150 √† 90',
  
  // Discount badge
  'top: 7': 'Badge top r√©duit de 12 √† 7',
  'right: 7': 'Badge right r√©duit de 12 √† 7',
  'paddingHorizontal: 7': 'Badge paddingHorizontal r√©duit de 12 √† 7',
  'paddingVertical: 4': 'Badge paddingVertical r√©duit de 6 √† 4',
  'borderRadius: 12': 'Badge borderRadius r√©duit de 20 √† 12',
  
  // Font sizes
  'fontSize: 8': 'FontSize r√©duit (plusieurs instances)',
  'fontSize: 10': 'Name fontSize r√©duit de 16 √† 10',
  'fontSize: 7': 'Petits textes fontSize r√©duits',
  
  // Paddings and margins
  'padding: 9': 'Content padding r√©duit de 15 √† 9',
  'marginBottom: 2': 'Name marginBottom r√©duit de 4 √† 2',
  'marginBottom: 5': 'Category marginBottom r√©duit de 8 √† 5',
  'marginBottom: 4': 'Info marginBottom r√©duit de 6 √† 4',
  'marginLeft: 2': 'MarginLeft r√©duits de 4 √† 2',
  'marginTop: 5': 'DiscountInfo marginTop r√©duit de 8 √† 5',
  
  // Icon sizes
  'size={8}': 'Star icon size r√©duite de 14 √† 8',
  'size={7}': 'MapPin icon size r√©duite de 12 √† 7',
  
  // Savings container
  'paddingHorizontal: 5': 'Savings paddingHorizontal r√©duit de 8 √† 5',
  'paddingVertical: 2': 'Savings paddingVertical r√©duit de 4 √† 2',
  'borderRadius: 7': 'Savings borderRadius r√©duit de 12 √† 7',
  'width: 18': 'Shimmer width r√©duite de 30 √† 18',
};

function verifyProviderCardChanges() {
  try {
    const fileContent = fs.readFileSync(filePath, 'utf8');
    
    console.log('üîç V√©rification des modifications des cartes prestataires...\n');
    
    let changesFound = 0;
    let totalChecks = Object.keys(expectedValues).length;
    
    for (const [value, description] of Object.entries(expectedValues)) {
      if (fileContent.includes(value)) {
        console.log(`‚úÖ ${description}`);
        changesFound++;
      } else {
        console.log(`‚ùå MANQUANT: ${description}`);
      }
    }
    
    console.log(`\nüìä R√©sum√©: ${changesFound}/${totalChecks} modifications d√©tect√©es`);
    
    if (changesFound === totalChecks) {
      console.log('üéâ Toutes les modifications ont √©t√© appliqu√©es avec succ√®s !');
      console.log('‚ú® Les cartes prestataires ont √©t√© r√©duites de 40% avec tous les √©l√©ments ajust√©s proportionnellement.');
    } else {
      console.log('‚ö†Ô∏è Certaines modifications semblent manquer. V√©rifiez le fichier manuellement.');
    }
    
    // V√©rification additionnelle des valeurs originales qui ne devraient plus √™tre pr√©sentes
    const oldValues = [
      'height: 150',
      'borderRadius: 16',
      'borderRadius: 20',
      'fontSize: 14',
      'fontSize: 16',
      'padding: 15',
      'size={14}',
      'size={12}',
      'paddingHorizontal: 12'
    ];
    
    console.log('\nüîç V√©rification des anciennes valeurs...');
    let oldValuesFound = 0;
    
    for (const oldValue of oldValues) {
      if (fileContent.includes(oldValue)) {
        console.log(`‚ö†Ô∏è Ancienne valeur encore pr√©sente: ${oldValue}`);
        oldValuesFound++;
      }
    }
    
    if (oldValuesFound === 0) {
      console.log('‚úÖ Aucune ancienne valeur d√©tect√©e - Migration compl√®te !');
    } else {
      console.log(`‚ö†Ô∏è ${oldValuesFound} anciennes valeurs encore pr√©sentes.`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la lecture du fichier:', error.message);
  }
}

// Ex√©cution du script
verifyProviderCardChanges();
