import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  TextInput,
  Alert,
  Animated,
  ScrollView,
  Dimensions,
} from 'react-native';
import { X, Smartphone, Plus, CreditCard, Wallet } from 'lucide-react-native';
import { useState, useEffect, useRef } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { pointsToFcfa, fcfaToPoints, formatPointsWithFcfa, isValidRechargeAmount } from '@/utils/pointsConversion';
import { useResponsiveModalStyles } from '@/hooks/useResponsiveDimensions';
import PaymentAggregatorModal from './PaymentAggregatorModal';

const { width, height } = Dimensions.get('window');

interface SimpleWalletModalProps {
  visible: boolean;
  onClose: () => void;
}

export default function SimpleWalletModal({ visible, onClose }: SimpleWalletModalProps) {
  const [activeTab, setActiveTab] = useState<'recharge' | 'history'>('recharge');
  const [amount, setAmount] = useState('');
  const [selectedMethod, setSelectedMethod] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showAnimation, setShowAnimation] = useState(false);
  const [confetti, setConfetti] = useState<Array<{id: number, x: number, y: number, color: string}>>([]);

  const responsiveStyles = useResponsiveModalStyles();
  const { user, addUserPoints } = useAuth();
  const fadeAnim = useRef(new Animated.Value(0)).current;
  const scaleAnim = useRef(new Animated.Value(0.9)).current;
  
  // Animations pour les effets visuels
  const successAnim = useRef(new Animated.Value(0)).current;
  const pulseAnim = useRef(new Animated.Value(1)).current;
  const confettiAnims = useRef<Animated.Value[]>([]).current;
  const rotateAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    if (visible) {
      Animated.parallel([
        Animated.timing(fadeAnim, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
        Animated.timing(scaleAnim, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start();
    } else {
      fadeAnim.setValue(0);
      scaleAnim.setValue(0.9);
    }
  }, [visible]);

  // Variables pour suivre les changements de points
  const [oldPoints, setOldPoints] = useState(0);
  const [addedPoints, setAddedPoints] = useState(0);
  const [showPaymentAggregator, setShowPaymentAggregator] = useState(false);
  const [currentPaymentInfo, setCurrentPaymentInfo] = useState<{
    amount: number;
    points: number;
    method: any;
  } | null>(null);
  
  // Animation de succès avec confettis
  const startSuccessAnimation = (pointsAdded = 0) => {
    console.log('Starting success animation');
    
    // Enregistrer les points ajoutés pour affichage
    setOldPoints(user?.points ? user.points - pointsAdded : 0);
    setAddedPoints(pointsAdded);
    
    setShowAnimation(true);
    
    // Générer des confettis
    const newConfetti = Array.from({ length: 20 }, (_, i) => ({
      id: i,
      x: Math.random() * width,
      y: height / 2,
      color: ['#00B14F', '#FFD700', '#FF6B6B', '#4ECDC4', '#8B5CF6'][Math.floor(Math.random() * 5)]
    }));
    console.log('Generated confetti:', newConfetti.length);
    setConfetti(newConfetti);
    
    // Créer les animations pour chaque confetti
    confettiAnims.length = 0;
    newConfetti.forEach(() => {
      confettiAnims.push(new Animated.Value(0));
    });
    
    // Animation de pulsation du montant
    Animated.loop(
      Animated.sequence([
        Animated.timing(pulseAnim, {
          toValue: 1.2,
          duration: 500,
          useNativeDriver: true,
        }),
        Animated.timing(pulseAnim, {
          toValue: 1,
          duration: 500,
          useNativeDriver: true,
        }),
      ]),
      { iterations: 3 }
    ).start();
    
    // Animation de rotation de l'icône
    Animated.timing(rotateAnim, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start();
    
    // Animation des confettis
    Animated.parallel(
      confettiAnims.map((anim, index) =>
        Animated.timing(anim, {
          toValue: 1,
          duration: 2000 + Math.random() * 1000,
          useNativeDriver: true,
        })
      )
    ).start();
    
    // Animation d'apparition du succès
    Animated.timing(successAnim, {
      toValue: 1,
      duration: 800,
      useNativeDriver: true,
    }).start();
    
    // Nettoyer après 3 secondes
    setTimeout(() => {
      console.log('Cleaning up animation');
      setShowAnimation(false);
      setConfetti([]);
      successAnim.setValue(0);
      pulseAnim.setValue(1);
      rotateAnim.setValue(0);
    }, 3000);
  };

  const paymentMethods = [
    { id: 'mtn', name: 'MTN Mobile Money', color: '#FFCC00', icon: Smartphone },
    { id: 'orange', name: 'Orange Money', color: '#FF6600', icon: Smartphone },
    { id: 'moov', name: 'Moov Money', color: '#007FFF', icon: Smartphone },
    { id: 'wave', name: 'Wave', color: '#00D4AA', icon: Smartphone },
    { id: 'visa', name: 'Visa Card', color: '#1A1F71', icon: CreditCard },
    { id: 'mastercard', name: 'Mastercard', color: '#EB001B', icon: CreditCard },
    { id: 'paypal', name: 'PayPal', color: '#0070BA', icon: Wallet },
  ];

  const transactions = [
    { id: '1', type: 'recharge', amount: 10000, points: 128, date: '2024-01-15', method: 'MTN' },
    { id: '2', type: 'payment', amount: -2500, points: -32, date: '2024-01-14', provider: 'Chez Tante Marie' },
    { id: '3', type: 'recharge', amount: 5000, points: 64, date: '2024-01-13', method: 'Orange' },
    { id: '4', type: 'payment', amount: -1800, points: -23, date: '2024-01-12', provider: 'Beauty Palace' },
    { id: '5', type: 'recharge', amount: 15000, points: 191, date: '2024-01-11', method: 'Wave' },
  ];

  const handleRecharge = () => {
    if (!amount || !selectedMethod) {
      Alert.alert('Erreur', 'Veuillez sélectionner un montant et un moyen de paiement');
      return;
    }

    const numericAmount = parseInt(amount);
    if (!isValidRechargeAmount(numericAmount)) {
      Alert.alert('Erreur', 'Le montant minimum est de 1000 FCFA');
      return;
    }

    const points = fcfaToPoints(numericAmount); // Conversion avec nouveau taux
    const selectedPaymentMethod = paymentMethods.find(m => m.id === selectedMethod);
    
    if (!selectedPaymentMethod) {
      Alert.alert('Erreur', 'Méthode de paiement non valide');
      return;
    }
    
    // Stockage des informations de paiement pour l'agrégateur
    setCurrentPaymentInfo({
      amount: numericAmount,
      points: points,
      method: selectedPaymentMethod
    });
    
    // Ouvrir l'agrégateur de paiement
    setShowPaymentAggregator(true);
  };
  
  // Cette fonction est appelée quand le paiement est complété avec succès dans l'agrégateur
  const handlePaymentSuccess = async () => {
    if (!currentPaymentInfo) return;
    
    setIsProcessing(true);
    
    // Capturer le solde actuel avant rechargement
    const oldPoints = user?.points || 0;
    
    try {
      // Ajouter les points à l'utilisateur
      await addUserPoints(currentPaymentInfo.points);
      
      // Afficher l'animation APRÈS que les points ont été ajoutés
      const newPoints = user?.points || 0;
      
      console.log('Rechargement effectué:', {
        oldPoints,
        pointsAdded: currentPaymentInfo.points,
        newPoints: newPoints,
        difference: newPoints - oldPoints
      });
      
      // Démarrer l'animation après la mise à jour des points
      startSuccessAnimation(currentPaymentInfo.points);
      
      // Attendre la fin de l'animation avant de fermer
      setTimeout(() => {
        Alert.alert('Succès', 
          `Rechargement effectué avec succès !\n
          Ancien solde: ${oldPoints.toLocaleString()} pts\n
          Points ajoutés: +${currentPaymentInfo.points.toLocaleString()} pts\n
          Nouveau solde: ${newPoints.toLocaleString()} pts`);
      }, 1000);
      
      setAmount('');
      setSelectedMethod(null);
      
      // Fermer après l'animation
      setTimeout(() => {
        onClose();
      }, 3500);
    } catch (error) {
      Alert.alert('Erreur', 'Erreur lors du rechargement');
      setShowAnimation(false);
    } finally {
      setIsProcessing(false);
    }
  };
  };

  const handleClose = () => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 0,
        duration: 200,
        useNativeDriver: true,
      }),
      Animated.timing(scaleAnim, {
        toValue: 0.9,
        duration: 200,
        useNativeDriver: true,
      }),
    ]).start(() => {
      setAmount('');
      setSelectedMethod(null);
      onClose();
    });
  };

  const rotateInterpolate = rotateAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '360deg'],
  });

  return (
    <>
      {/* Modal de l'agrégateur de paiement */}
      {currentPaymentInfo && (
        <PaymentAggregatorModal
          visible={showPaymentAggregator}
          onClose={() => setShowPaymentAggregator(false)}
          onSuccess={handlePaymentSuccess}
          amount={currentPaymentInfo.amount}
          points={currentPaymentInfo.points}
          paymentMethod={currentPaymentInfo.method}
        />
      )}
      
      <Modal
        visible={visible}
        transparent={true}
        animationType="none"
        onRequestClose={handleClose}
      >
      <TouchableOpacity 
        style={responsiveStyles.overlay} 
        activeOpacity={1} 
        onPress={() => {}} // Empêche la fermeture sur clic overlay
      >
        <Animated.View 
          style={[
            styles.container,
            {
              width: responsiveStyles.container.maxWidth,
              maxHeight: responsiveStyles.container.maxHeight,
              borderRadius: responsiveStyles.container.borderRadius,
              shadowColor: responsiveStyles.container.shadowColor,
              shadowOffset: responsiveStyles.container.shadowOffset,
              shadowOpacity: responsiveStyles.container.shadowOpacity,
              shadowRadius: responsiveStyles.container.shadowRadius,
              elevation: responsiveStyles.container.elevation,
              opacity: fadeAnim,
              transform: [{ scale: scaleAnim }],
            }
          ]}
          onStartShouldSetResponder={() => true}
          onResponderGrant={(e) => {
            e.stopPropagation();
            return true;
          }}
        >
          {/* Animation de succès avec confettis */}
          {showAnimation && (
            <View style={styles.animationOverlay}>
              <Animated.Text
                style={{
                  position: 'absolute',
                  top: 50,
                  left: 0,
                  right: 0,
                  textAlign: 'center',
                  color: '#00B14F',
                  fontSize: 24,
                  fontWeight: 'bold',
                  zIndex: 9999,
                  transform: [{ scale: pulseAnim }],
                }}
              >
                🎉 Rechargement réussi !
              </Animated.Text>
              <Animated.Text
                style={{
                  position: 'absolute',
                  top: 90,
                  left: 0,
                  right: 0,
                  textAlign: 'center',
                  color: '#333',
                  fontSize: 18,
                  fontWeight: '600',
                  zIndex: 9999,
                  transform: [{ scale: pulseAnim }],
                }}
              >
                Ancien solde : {oldPoints?.toLocaleString()} pts
              </Animated.Text>
              
              <Animated.Text
                style={{
                  position: 'absolute',
                  top: 120,
                  left: 0,
                  right: 0,
                  textAlign: 'center',
                  color: '#00B14F',
                  fontSize: 18,
                  fontWeight: 'bold',
                  zIndex: 9999,
                  transform: [{ scale: pulseAnim }],
                }}
              >
                + {addedPoints.toLocaleString()} pts ajoutés
              </Animated.Text>
              
              <Animated.Text
                style={{
                  position: 'absolute',
                  top: 150,
                  left: 0,
                  right: 0,
                  textAlign: 'center',
                  color: '#007BFF',
                  fontSize: 18,
                  fontWeight: 'bold',
                  zIndex: 9999,
                  transform: [{ scale: pulseAnim }],
                }}
              >
                Nouveau solde : {user?.points?.toLocaleString()} pts
              </Animated.Text>
              {/* Confettis */}
              {confetti.map((item, index) => {
                const animValue = confettiAnims[index];
                if (!animValue) return null;
                const translateY = animValue.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, -height],
                });
                const translateX = animValue.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, (Math.random() - 0.5) * 200],
                });
                const rotate = animValue.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['0deg', '720deg'],
                });
                return (
                  <Animated.View
                    key={item.id}
                    style={[
                      styles.confetti,
                      {
                        left: item.x,
                        top: item.y,
                        backgroundColor: item.color,
                        transform: [
                          { translateY },
                          { translateX },
                          { rotate },
                        ],
                      },
                    ]}
                  />
                );
              })}
              
              {/* Message de succès */}
              <Animated.View
                style={[
                  styles.successMessage,
                  {
                    opacity: successAnim,
                    transform: [{ scale: successAnim }],
                  },
                ]}
              >
                <Animated.View style={{ transform: [{ rotate: rotateInterpolate }] }}>
                  <Plus size={40} color="#00B14F" />
                </Animated.View>
                <Animated.Text style={[styles.successText, { transform: [{ scale: pulseAnim }] }]}>
                  +{addedPoints.toLocaleString()} points ajoutés !
                </Animated.Text>
              </Animated.View>
            </View>
          )}

          <View style={responsiveStyles.header}>
            <Text style={responsiveStyles.title}>Mon Portefeuille</Text>
            <TouchableOpacity onPress={handleClose} style={responsiveStyles.closeButton}>
              <X size={24} color="#8E8E8E" />
            </TouchableOpacity>
          </View>

          {/* Balance Info */}
          <View style={styles.balanceSection}>
            <View style={styles.balanceRow}>
              <Text style={styles.balanceLabel}>Points</Text>
              <Text style={styles.balanceValue}>{user?.points?.toLocaleString() || '0'}</Text>
            </View>
            <View style={styles.balanceRow}>
              <Text style={styles.balanceLabel}>Solde</Text>
              <Text style={styles.balanceValue}>{pointsToFcfa(user?.points || 0).toLocaleString()} FCFA</Text>
            </View>
            
            {/* Bouton de test pour vérifier l'ajout de points */}
            <TouchableOpacity 
              style={styles.testButton}
              onPress={() => {
                addUserPoints(10);
                Alert.alert("Test", "10 points ajoutés manuellement");
              }}
            >
              <Text style={styles.testButtonText}>+ Test (10pts)</Text>
            </TouchableOpacity>
          </View>

          {/* Tabs */}
          <View style={styles.tabs}>
            <TouchableOpacity
              style={[styles.tab, activeTab === 'recharge' && styles.activeTab]}
              onPress={() => setActiveTab('recharge')}
            >
              <Text style={[styles.tabText, activeTab === 'recharge' && styles.activeTabText]}>
                Recharger
              </Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.tab, activeTab === 'history' && styles.activeTab]}
              onPress={() => setActiveTab('history')}
            >
              <Text style={[styles.tabText, activeTab === 'history' && styles.activeTabText]}>
                Historique
              </Text>
            </TouchableOpacity>
          </View>

          {/* Content */}
          <ScrollView 
            style={styles.content} 
            showsVerticalScrollIndicator={false}
            onStartShouldSetResponder={() => true}
          >
            {activeTab === 'recharge' ? (
              <View style={styles.rechargeContent}>
                <Text style={styles.sectionTitle}>Montant à recharger</Text>
                <TextInput
                  style={styles.amountInput}
                  placeholder="Entrez le montant en FCFA"
                  value={amount}
                  onChangeText={setAmount}
                  keyboardType="numeric"
                  placeholderTextColor="#8E8E8E"
                  onStartShouldSetResponder={() => true}
                  onResponderGrant={() => true}
                  onTouchStart={(e) => e.stopPropagation()}
                />
                {amount && (
                  <Text style={styles.pointsInfo}>
                    = {fcfaToPoints(parseInt(amount)).toLocaleString()} points
                  </Text>
                )}

                <Text style={styles.sectionTitle}>Moyen de paiement</Text>
                {paymentMethods.map((method) => (
                  <TouchableOpacity
                    key={method.id}
                    style={[
                      styles.paymentMethod,
                      selectedMethod === method.id && styles.selectedPaymentMethod,
                    ]}
                    onPress={() => setSelectedMethod(method.id)}
                  >
                    <View style={[styles.methodIcon, { backgroundColor: method.color }]}>
                      <method.icon size={20} color="#fff" />
                    </View>
                    <Text style={styles.methodName}>{method.name}</Text>
                    <View style={[
                      styles.radioButton,
                      selectedMethod === method.id && styles.radioButtonSelected
                    ]}>
                      {selectedMethod === method.id && <View style={styles.radioButtonInner} />}
                    </View>
                  </TouchableOpacity>
                ))}
              </View>
            ) : (
              <View style={styles.historyContent}>
                <Text style={styles.sectionTitle}>Historique des transactions</Text>
                {transactions.map((transaction) => (
                  <View key={transaction.id} style={styles.transactionItem}>
                    <View style={styles.transactionIcon}>
                      {transaction.type === 'recharge' ? (
                        <Plus size={20} color="#00B14F" />
                      ) : (
                        <CreditCard size={20} color="#FF6B6B" />
                      )}
                    </View>
                    <View style={styles.transactionInfo}>
                      <Text style={styles.transactionTitle}>
                        {transaction.type === 'recharge' 
                          ? `Rechargement ${transaction.method}`
                          : `Paiement chez ${transaction.provider}`
                        }
                      </Text>
                      <Text style={styles.transactionDate}>{transaction.date}</Text>
                    </View>
                    <View style={styles.transactionAmount}>
                      <Text
                        style={[
                          styles.transactionValue,
                          { color: transaction.amount > 0 ? '#00B14F' : '#FF6B6B' },
                        ]}
                      >
                        {transaction.amount > 0 ? '+' : ''}{transaction.amount.toLocaleString()} FCFA
                      </Text>
                      <Text
                        style={[
                          styles.transactionPoints,
                          { color: transaction.points > 0 ? '#00B14F' : '#FF6B6B' },
                        ]}
                      >
                        {transaction.points > 0 ? '+' : ''}{fcfaToPoints(Math.abs(transaction.amount)).toLocaleString()} pts
                      </Text>
                    </View>
                  </View>
                ))}
              </View>
            )}
          </ScrollView>

          {/* Footer avec bouton Recharger */}
          {activeTab === 'recharge' && (
            <View style={styles.footer}>
              <TouchableOpacity 
                style={[
                  styles.rechargeButton,
                  (!amount || !selectedMethod || isProcessing) && styles.rechargeButtonDisabled
                ]} 
                onPress={handleRecharge}
                disabled={!amount || !selectedMethod || isProcessing}
              >
                <Plus size={20} color="#fff" />
                <Text style={styles.rechargeButtonText}>
                  {isProcessing ? 'Traitement...' : 'Recharger'}
                </Text>
              </TouchableOpacity>
            </View>
          )}
        </Animated.View>
      </TouchableOpacity>
    </Modal>
  );
}

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    width: '90%',
    maxWidth: 400,
    maxHeight: '85%',
    backgroundColor: '#fff',
    borderRadius: 20,
    overflow: 'hidden',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F5F5F5',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#000',
  },
  closeButton: {
    padding: 5,
  },
  balanceSection: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 25,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#F5F5F5',
  },
  balanceRow: {
    flex: 1,
    alignItems: 'center',
  },
  balanceLabel: {
    fontSize: 14,
    color: '#8E8E8E',
    marginBottom: 8,
    textAlign: 'center',
  },
  balanceValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#000',
    textAlign: 'center',
  },
  tabs: {
    flexDirection: 'row',
    backgroundColor: '#F5F5F5',
    margin: 20,
    borderRadius: 12,
    padding: 4,
  },
  tab: {
    flex: 1,
    paddingVertical: 12,
    alignItems: 'center',
    borderRadius: 8,
  },
  activeTab: {
    backgroundColor: '#fff',
  },
  tabText: {
    fontSize: 14,
    color: '#8E8E8E',
    fontWeight: '500',
  },
  activeTabText: {
    color: '#000',
    fontWeight: '600',
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  rechargeContent: {
    paddingBottom: 20,
  },
  historyContent: {
    paddingBottom: 20,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#000',
    marginBottom: 15,
    marginTop: 10,
  },
  amountInput: {
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 12,
    paddingHorizontal: 15,
    paddingVertical: 15,
    fontSize: 16,
    color: '#000',
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  pointsInfo: {
    fontSize: 14,
    color: '#00B14F',
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 20,
  },
  paymentMethod: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 12,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  selectedPaymentMethod: {
    borderColor: '#00B14F',
    backgroundColor: '#F0F9F4',
  },
  methodIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  methodName: {
    flex: 1,
    fontSize: 16,
    color: '#000',
    fontWeight: '500',
  },
  radioButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    borderWidth: 2,
    borderColor: '#E5E5E5',
    justifyContent: 'center',
    alignItems: 'center',
  },
  radioButtonSelected: {
    borderColor: '#00B14F',
    backgroundColor: '#00B14F',
  },
  radioButtonInner: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#fff',
  },
  transactionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 15,
    backgroundColor: '#F8F9FA',
    borderRadius: 12,
    marginBottom: 10,
  },
  transactionIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#fff',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: 15,
  },
  transactionInfo: {
    flex: 1,
  },
  transactionTitle: {
    fontSize: 14,
    fontWeight: '600',
    color: '#000',
    marginBottom: 2,
  },
  transactionDate: {
    fontSize: 12,
    color: '#8E8E8E',
  },
  transactionAmount: {
    alignItems: 'flex-end',
  },
  transactionValue: {
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 2,
  },
  transactionPoints: {
    fontSize: 12,
    fontWeight: '500',
  },
  footer: {
    padding: 20,
    paddingTop: 15,
    borderTopWidth: 1,
    borderTopColor: '#F5F5F5',
    backgroundColor: '#fff',
  },
  rechargeButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#00B14F',
    paddingVertical: 16,
    borderRadius: 12,
    gap: 8,
    shadowColor: '#00B14F',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  rechargeButtonDisabled: {
    backgroundColor: '#ccc',
    shadowOpacity: 0,
    elevation: 0,
  },
  rechargeButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  animationOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: 9999,
    pointerEvents: 'none',
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
  },
  confetti: {
    position: 'absolute',
    width: 8,
    height: 8,
    borderRadius: 4,
  },
  successMessage: {
    position: 'absolute',
    top: '40%',
    left: '50%',
    transform: [{ translateX: -100 }, { translateY: -50 }],
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 20,
    padding: 30,
    alignItems: 'center',
    shadowColor: '#00B14F',
    shadowOffset: { width: 0, height: 8 },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 10,
    borderWidth: 2,
    borderColor: '#00B14F',
  },
  successText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#00B14F',
    marginTop: 15,
    textAlign: 'center',
  },
  testButton: {
    position: 'absolute',
    right: 10,
    top: 10,
    backgroundColor: '#007BFF',
    paddingVertical: 5,
    paddingHorizontal: 10,
    borderRadius: 15,
    elevation: 3,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  testButtonText: {
    color: '#fff',
    fontSize: 12,
    fontWeight: 'bold',
  },
});